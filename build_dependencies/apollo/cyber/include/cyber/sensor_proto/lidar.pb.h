// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lidar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lidar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lidar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lidar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidar_2eproto;
namespace crdc {
namespace airi {
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointCloud2;
class PointCloud2DefaultTypeInternal;
extern PointCloud2DefaultTypeInternal _PointCloud2_default_instance_;
class PointClouds;
class PointCloudsDefaultTypeInternal;
extern PointCloudsDefaultTypeInternal _PointClouds_default_instance_;
class PointClouds2;
class PointClouds2DefaultTypeInternal;
extern PointClouds2DefaultTypeInternal _PointClouds2_default_instance_;
class PointField;
class PointFieldDefaultTypeInternal;
extern PointFieldDefaultTypeInternal _PointField_default_instance_;
class PointXYZIT;
class PointXYZITDefaultTypeInternal;
extern PointXYZITDefaultTypeInternal _PointXYZIT_default_instance_;
}  // namespace airi
}  // namespace crdc
PROTOBUF_NAMESPACE_OPEN
template<> ::crdc::airi::PointCloud* Arena::CreateMaybeMessage<::crdc::airi::PointCloud>(Arena*);
template<> ::crdc::airi::PointCloud2* Arena::CreateMaybeMessage<::crdc::airi::PointCloud2>(Arena*);
template<> ::crdc::airi::PointClouds* Arena::CreateMaybeMessage<::crdc::airi::PointClouds>(Arena*);
template<> ::crdc::airi::PointClouds2* Arena::CreateMaybeMessage<::crdc::airi::PointClouds2>(Arena*);
template<> ::crdc::airi::PointField* Arena::CreateMaybeMessage<::crdc::airi::PointField>(Arena*);
template<> ::crdc::airi::PointXYZIT* Arena::CreateMaybeMessage<::crdc::airi::PointXYZIT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace crdc {
namespace airi {

enum PointField_PointFieldType : int {
  PointField_PointFieldType_INT8 = 1,
  PointField_PointFieldType_UINT8 = 2,
  PointField_PointFieldType_INT16 = 3,
  PointField_PointFieldType_UINT16 = 4,
  PointField_PointFieldType_INT32 = 5,
  PointField_PointFieldType_UINT32 = 6,
  PointField_PointFieldType_FLOAT32 = 7,
  PointField_PointFieldType_FLOAT64 = 8
};
bool PointField_PointFieldType_IsValid(int value);
constexpr PointField_PointFieldType PointField_PointFieldType_PointFieldType_MIN = PointField_PointFieldType_INT8;
constexpr PointField_PointFieldType PointField_PointFieldType_PointFieldType_MAX = PointField_PointFieldType_FLOAT64;
constexpr int PointField_PointFieldType_PointFieldType_ARRAYSIZE = PointField_PointFieldType_PointFieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointField_PointFieldType_descriptor();
template<typename T>
inline const std::string& PointField_PointFieldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PointField_PointFieldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PointField_PointFieldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PointField_PointFieldType_descriptor(), enum_t_value);
}
inline bool PointField_PointFieldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PointField_PointFieldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PointField_PointFieldType>(
    PointField_PointFieldType_descriptor(), name, value);
}
// ===================================================================

class PointXYZIT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.PointXYZIT) */ {
 public:
  inline PointXYZIT() : PointXYZIT(nullptr) {}
  virtual ~PointXYZIT();

  PointXYZIT(const PointXYZIT& from);
  PointXYZIT(PointXYZIT&& from) noexcept
    : PointXYZIT() {
    *this = ::std::move(from);
  }

  inline PointXYZIT& operator=(const PointXYZIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointXYZIT& operator=(PointXYZIT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointXYZIT& default_instance();

  static inline const PointXYZIT* internal_default_instance() {
    return reinterpret_cast<const PointXYZIT*>(
               &_PointXYZIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointXYZIT& a, PointXYZIT& b) {
    a.Swap(&b);
  }
  inline void Swap(PointXYZIT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointXYZIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointXYZIT* New() const final {
    return CreateMaybeMessage<PointXYZIT>(nullptr);
  }

  PointXYZIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointXYZIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointXYZIT& from);
  void MergeFrom(const PointXYZIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointXYZIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.PointXYZIT";
  }
  protected:
  explicit PointXYZIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRingFieldNumber = 4,
    kIntensityFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kSemanticFlagFieldNumber = 9,
    kDistanceFieldNumber = 10,
    kElevationFieldNumber = 6,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kAzimuthFieldNumber = 5,
  };
  // optional uint32 ring = 4 [default = 0];
  bool has_ring() const;
  private:
  bool _internal_has_ring() const;
  public:
  void clear_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 ring() const;
  void set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ring() const;
  void _internal_set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 intensity = 7 [default = 0];
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  ::PROTOBUF_NAMESPACE_ID::uint32 intensity() const;
  void set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intensity() const;
  void _internal_set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 timestamp = 8 [default = 0];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 semantic_flag = 9 [default = 0];
  bool has_semantic_flag() const;
  private:
  bool _internal_has_semantic_flag() const;
  public:
  void clear_semantic_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 semantic_flag() const;
  void set_semantic_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semantic_flag() const;
  void _internal_set_semantic_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float distance = 10 [default = 0];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // optional float elevation = 6 [default = nan];
  bool has_elevation() const;
  private:
  bool _internal_has_elevation() const;
  public:
  void clear_elevation();
  float elevation() const;
  void set_elevation(float value);
  private:
  float _internal_elevation() const;
  void _internal_set_elevation(float value);
  public:

  // optional float x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3 [default = nan];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float azimuth = 5 [default = nan];
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  float azimuth() const;
  void set_azimuth(float value);
  private:
  float _internal_azimuth() const;
  void _internal_set_azimuth(float value);
  public:

  // @@protoc_insertion_point(class_scope:crdc.airi.PointXYZIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 intensity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semantic_flag_;
  float distance_;
  float elevation_;
  float x_;
  float y_;
  float z_;
  float azimuth_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud& default_instance();

  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kIsDenseFieldNumber = 3,
    kWidthFieldNumber = 6,
    kMeasurementTimeFieldNumber = 5,
    kHeightFieldNumber = 7,
  };
  // repeated .crdc.airi.PointXYZIT point = 2;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::crdc::airi::PointXYZIT* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointXYZIT >*
      mutable_point();
  private:
  const ::crdc::airi::PointXYZIT& _internal_point(int index) const;
  ::crdc::airi::PointXYZIT* _internal_add_point();
  public:
  const ::crdc::airi::PointXYZIT& point(int index) const;
  ::crdc::airi::PointXYZIT* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointXYZIT >&
      point() const;

  // optional .crdc.airi.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::crdc::airi::Header& header() const;
  ::crdc::airi::Header* release_header();
  ::crdc::airi::Header* mutable_header();
  void set_allocated_header(::crdc::airi::Header* header);
  private:
  const ::crdc::airi::Header& _internal_header() const;
  ::crdc::airi::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::crdc::airi::Header* header);
  ::crdc::airi::Header* unsafe_arena_release_header();

  // optional bool is_dense = 3;
  bool has_is_dense() const;
  private:
  bool _internal_has_is_dense() const;
  public:
  void clear_is_dense();
  bool is_dense() const;
  void set_is_dense(bool value);
  private:
  bool _internal_is_dense() const;
  void _internal_set_is_dense(bool value);
  public:

  // optional uint32 width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double measurement_time = 5;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional uint32 height = 7;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:crdc.airi.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointXYZIT > point_;
  ::crdc::airi::Header* header_;
  bool is_dense_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  double measurement_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class PointClouds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.PointClouds) */ {
 public:
  inline PointClouds() : PointClouds(nullptr) {}
  virtual ~PointClouds();

  PointClouds(const PointClouds& from);
  PointClouds(PointClouds&& from) noexcept
    : PointClouds() {
    *this = ::std::move(from);
  }

  inline PointClouds& operator=(const PointClouds& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointClouds& operator=(PointClouds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointClouds& default_instance();

  static inline const PointClouds* internal_default_instance() {
    return reinterpret_cast<const PointClouds*>(
               &_PointClouds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointClouds& a, PointClouds& b) {
    a.Swap(&b);
  }
  inline void Swap(PointClouds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointClouds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointClouds* New() const final {
    return CreateMaybeMessage<PointClouds>(nullptr);
  }

  PointClouds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointClouds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointClouds& from);
  void MergeFrom(const PointClouds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointClouds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.PointClouds";
  }
  protected:
  explicit PointClouds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .crdc.airi.PointCloud clouds = 2;
  int clouds_size() const;
  private:
  int _internal_clouds_size() const;
  public:
  void clear_clouds();
  ::crdc::airi::PointCloud* mutable_clouds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud >*
      mutable_clouds();
  private:
  const ::crdc::airi::PointCloud& _internal_clouds(int index) const;
  ::crdc::airi::PointCloud* _internal_add_clouds();
  public:
  const ::crdc::airi::PointCloud& clouds(int index) const;
  ::crdc::airi::PointCloud* add_clouds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud >&
      clouds() const;

  // optional .crdc.airi.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::crdc::airi::Header& header() const;
  ::crdc::airi::Header* release_header();
  ::crdc::airi::Header* mutable_header();
  void set_allocated_header(::crdc::airi::Header* header);
  private:
  const ::crdc::airi::Header& _internal_header() const;
  ::crdc::airi::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::crdc::airi::Header* header);
  ::crdc::airi::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:crdc.airi.PointClouds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud > clouds_;
  ::crdc::airi::Header* header_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class PointField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.PointField) */ {
 public:
  inline PointField() : PointField(nullptr) {}
  virtual ~PointField();

  PointField(const PointField& from);
  PointField(PointField&& from) noexcept
    : PointField() {
    *this = ::std::move(from);
  }

  inline PointField& operator=(const PointField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointField& operator=(PointField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointField& default_instance();

  static inline const PointField* internal_default_instance() {
    return reinterpret_cast<const PointField*>(
               &_PointField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PointField& a, PointField& b) {
    a.Swap(&b);
  }
  inline void Swap(PointField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointField* New() const final {
    return CreateMaybeMessage<PointField>(nullptr);
  }

  PointField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointField& from);
  void MergeFrom(const PointField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.PointField";
  }
  protected:
  explicit PointField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PointField_PointFieldType PointFieldType;
  static constexpr PointFieldType INT8 =
    PointField_PointFieldType_INT8;
  static constexpr PointFieldType UINT8 =
    PointField_PointFieldType_UINT8;
  static constexpr PointFieldType INT16 =
    PointField_PointFieldType_INT16;
  static constexpr PointFieldType UINT16 =
    PointField_PointFieldType_UINT16;
  static constexpr PointFieldType INT32 =
    PointField_PointFieldType_INT32;
  static constexpr PointFieldType UINT32 =
    PointField_PointFieldType_UINT32;
  static constexpr PointFieldType FLOAT32 =
    PointField_PointFieldType_FLOAT32;
  static constexpr PointFieldType FLOAT64 =
    PointField_PointFieldType_FLOAT64;
  static inline bool PointFieldType_IsValid(int value) {
    return PointField_PointFieldType_IsValid(value);
  }
  static constexpr PointFieldType PointFieldType_MIN =
    PointField_PointFieldType_PointFieldType_MIN;
  static constexpr PointFieldType PointFieldType_MAX =
    PointField_PointFieldType_PointFieldType_MAX;
  static constexpr int PointFieldType_ARRAYSIZE =
    PointField_PointFieldType_PointFieldType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PointFieldType_descriptor() {
    return PointField_PointFieldType_descriptor();
  }
  template<typename T>
  static inline const std::string& PointFieldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PointFieldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PointFieldType_Name.");
    return PointField_PointFieldType_Name(enum_t_value);
  }
  static inline bool PointFieldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PointFieldType* value) {
    return PointField_PointFieldType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
    kDatatypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 offset = 3;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 4;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .crdc.airi.PointField.PointFieldType datatype = 2;
  bool has_datatype() const;
  private:
  bool _internal_has_datatype() const;
  public:
  void clear_datatype();
  ::crdc::airi::PointField_PointFieldType datatype() const;
  void set_datatype(::crdc::airi::PointField_PointFieldType value);
  private:
  ::crdc::airi::PointField_PointFieldType _internal_datatype() const;
  void _internal_set_datatype(::crdc::airi::PointField_PointFieldType value);
  public:

  // @@protoc_insertion_point(class_scope:crdc.airi.PointField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  int datatype_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class PointCloud2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.PointCloud2) */ {
 public:
  inline PointCloud2() : PointCloud2(nullptr) {}
  virtual ~PointCloud2();

  PointCloud2(const PointCloud2& from);
  PointCloud2(PointCloud2&& from) noexcept
    : PointCloud2() {
    *this = ::std::move(from);
  }

  inline PointCloud2& operator=(const PointCloud2& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud2& operator=(PointCloud2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud2& default_instance();

  static inline const PointCloud2* internal_default_instance() {
    return reinterpret_cast<const PointCloud2*>(
               &_PointCloud2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PointCloud2& a, PointCloud2& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud2* New() const final {
    return CreateMaybeMessage<PointCloud2>(nullptr);
  }

  PointCloud2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud2& from);
  void MergeFrom(const PointCloud2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.PointCloud2";
  }
  protected:
  explicit PointCloud2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kDataFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
    kPointStepFieldNumber = 6,
    kRowStepFieldNumber = 7,
    kIsDenseFieldNumber = 8,
    kIsBigendianFieldNumber = 9,
  };
  // repeated .crdc.airi.PointField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::crdc::airi::PointField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointField >*
      mutable_fields();
  private:
  const ::crdc::airi::PointField& _internal_fields(int index) const;
  ::crdc::airi::PointField* _internal_add_fields();
  public:
  const ::crdc::airi::PointField& fields(int index) const;
  ::crdc::airi::PointField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointField >&
      fields() const;

  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .crdc.airi.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::crdc::airi::Header& header() const;
  ::crdc::airi::Header* release_header();
  ::crdc::airi::Header* mutable_header();
  void set_allocated_header(::crdc::airi::Header* header);
  private:
  const ::crdc::airi::Header& _internal_header() const;
  ::crdc::airi::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::crdc::airi::Header* header);
  ::crdc::airi::Header* unsafe_arena_release_header();

  // optional uint32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 point_step = 6;
  bool has_point_step() const;
  private:
  bool _internal_has_point_step() const;
  public:
  void clear_point_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_step() const;
  void set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_step() const;
  void _internal_set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 row_step = 7;
  bool has_row_step() const;
  private:
  bool _internal_has_row_step() const;
  public:
  void clear_row_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_step() const;
  void set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_step() const;
  void _internal_set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_dense = 8;
  bool has_is_dense() const;
  private:
  bool _internal_has_is_dense() const;
  public:
  void clear_is_dense();
  bool is_dense() const;
  void set_is_dense(bool value);
  private:
  bool _internal_is_dense() const;
  void _internal_set_is_dense(bool value);
  public:

  // optional bool is_bigendian = 9;
  bool has_is_bigendian() const;
  private:
  bool _internal_has_is_bigendian() const;
  public:
  void clear_is_bigendian();
  bool is_bigendian() const;
  void set_is_bigendian(bool value);
  private:
  bool _internal_is_bigendian() const;
  void _internal_set_is_bigendian(bool value);
  public:

  // @@protoc_insertion_point(class_scope:crdc.airi.PointCloud2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointField > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::crdc::airi::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_step_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_step_;
  bool is_dense_;
  bool is_bigendian_;
  friend struct ::TableStruct_lidar_2eproto;
};
// -------------------------------------------------------------------

class PointClouds2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.PointClouds2) */ {
 public:
  inline PointClouds2() : PointClouds2(nullptr) {}
  virtual ~PointClouds2();

  PointClouds2(const PointClouds2& from);
  PointClouds2(PointClouds2&& from) noexcept
    : PointClouds2() {
    *this = ::std::move(from);
  }

  inline PointClouds2& operator=(const PointClouds2& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointClouds2& operator=(PointClouds2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointClouds2& default_instance();

  static inline const PointClouds2* internal_default_instance() {
    return reinterpret_cast<const PointClouds2*>(
               &_PointClouds2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PointClouds2& a, PointClouds2& b) {
    a.Swap(&b);
  }
  inline void Swap(PointClouds2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointClouds2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointClouds2* New() const final {
    return CreateMaybeMessage<PointClouds2>(nullptr);
  }

  PointClouds2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointClouds2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointClouds2& from);
  void MergeFrom(const PointClouds2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointClouds2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.PointClouds2";
  }
  protected:
  explicit PointClouds2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidar_2eproto);
    return ::descriptor_table_lidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .crdc.airi.PointCloud2 clouds = 2;
  int clouds_size() const;
  private:
  int _internal_clouds_size() const;
  public:
  void clear_clouds();
  ::crdc::airi::PointCloud2* mutable_clouds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud2 >*
      mutable_clouds();
  private:
  const ::crdc::airi::PointCloud2& _internal_clouds(int index) const;
  ::crdc::airi::PointCloud2* _internal_add_clouds();
  public:
  const ::crdc::airi::PointCloud2& clouds(int index) const;
  ::crdc::airi::PointCloud2* add_clouds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud2 >&
      clouds() const;

  // optional .crdc.airi.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::crdc::airi::Header& header() const;
  ::crdc::airi::Header* release_header();
  ::crdc::airi::Header* mutable_header();
  void set_allocated_header(::crdc::airi::Header* header);
  private:
  const ::crdc::airi::Header& _internal_header() const;
  ::crdc::airi::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::crdc::airi::Header* header);
  ::crdc::airi::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:crdc.airi.PointClouds2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud2 > clouds_;
  ::crdc::airi::Header* header_;
  friend struct ::TableStruct_lidar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointXYZIT

// optional float x = 1 [default = nan];
inline bool PointXYZIT::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PointXYZIT::has_x() const {
  return _internal_has_x();
}
inline void PointXYZIT::clear_x() {
  x_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000040u;
}
inline float PointXYZIT::_internal_x() const {
  return x_;
}
inline float PointXYZIT::x() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.x)
  return _internal_x();
}
inline void PointXYZIT::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000040u;
  x_ = value;
}
inline void PointXYZIT::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.x)
}

// optional float y = 2 [default = nan];
inline bool PointXYZIT::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PointXYZIT::has_y() const {
  return _internal_has_y();
}
inline void PointXYZIT::clear_y() {
  y_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000080u;
}
inline float PointXYZIT::_internal_y() const {
  return y_;
}
inline float PointXYZIT::y() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.y)
  return _internal_y();
}
inline void PointXYZIT::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000080u;
  y_ = value;
}
inline void PointXYZIT::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.y)
}

// optional float z = 3 [default = nan];
inline bool PointXYZIT::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PointXYZIT::has_z() const {
  return _internal_has_z();
}
inline void PointXYZIT::clear_z() {
  z_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000100u;
}
inline float PointXYZIT::_internal_z() const {
  return z_;
}
inline float PointXYZIT::z() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.z)
  return _internal_z();
}
inline void PointXYZIT::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000100u;
  z_ = value;
}
inline void PointXYZIT::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.z)
}

// optional uint32 ring = 4 [default = 0];
inline bool PointXYZIT::_internal_has_ring() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointXYZIT::has_ring() const {
  return _internal_has_ring();
}
inline void PointXYZIT::clear_ring() {
  ring_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIT::_internal_ring() const {
  return ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIT::ring() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.ring)
  return _internal_ring();
}
inline void PointXYZIT::_internal_set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ring_ = value;
}
inline void PointXYZIT::set_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ring(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.ring)
}

// optional float azimuth = 5 [default = nan];
inline bool PointXYZIT::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PointXYZIT::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void PointXYZIT::clear_azimuth() {
  azimuth_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000200u;
}
inline float PointXYZIT::_internal_azimuth() const {
  return azimuth_;
}
inline float PointXYZIT::azimuth() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.azimuth)
  return _internal_azimuth();
}
inline void PointXYZIT::_internal_set_azimuth(float value) {
  _has_bits_[0] |= 0x00000200u;
  azimuth_ = value;
}
inline void PointXYZIT::set_azimuth(float value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.azimuth)
}

// optional float elevation = 6 [default = nan];
inline bool PointXYZIT::_internal_has_elevation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PointXYZIT::has_elevation() const {
  return _internal_has_elevation();
}
inline void PointXYZIT::clear_elevation() {
  elevation_ = std::numeric_limits<float>::quiet_NaN();
  _has_bits_[0] &= ~0x00000020u;
}
inline float PointXYZIT::_internal_elevation() const {
  return elevation_;
}
inline float PointXYZIT::elevation() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.elevation)
  return _internal_elevation();
}
inline void PointXYZIT::_internal_set_elevation(float value) {
  _has_bits_[0] |= 0x00000020u;
  elevation_ = value;
}
inline void PointXYZIT::set_elevation(float value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.elevation)
}

// optional uint32 intensity = 7 [default = 0];
inline bool PointXYZIT::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointXYZIT::has_intensity() const {
  return _internal_has_intensity();
}
inline void PointXYZIT::clear_intensity() {
  intensity_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIT::_internal_intensity() const {
  return intensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIT::intensity() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.intensity)
  return _internal_intensity();
}
inline void PointXYZIT::_internal_set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  intensity_ = value;
}
inline void PointXYZIT::set_intensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.intensity)
}

// optional uint64 timestamp = 8 [default = 0];
inline bool PointXYZIT::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointXYZIT::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void PointXYZIT::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointXYZIT::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PointXYZIT::timestamp() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.timestamp)
  return _internal_timestamp();
}
inline void PointXYZIT::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void PointXYZIT::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.timestamp)
}

// optional uint32 semantic_flag = 9 [default = 0];
inline bool PointXYZIT::_internal_has_semantic_flag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointXYZIT::has_semantic_flag() const {
  return _internal_has_semantic_flag();
}
inline void PointXYZIT::clear_semantic_flag() {
  semantic_flag_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIT::_internal_semantic_flag() const {
  return semantic_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointXYZIT::semantic_flag() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.semantic_flag)
  return _internal_semantic_flag();
}
inline void PointXYZIT::_internal_set_semantic_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  semantic_flag_ = value;
}
inline void PointXYZIT::set_semantic_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semantic_flag(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.semantic_flag)
}

// optional float distance = 10 [default = 0];
inline bool PointXYZIT::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointXYZIT::has_distance() const {
  return _internal_has_distance();
}
inline void PointXYZIT::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PointXYZIT::_internal_distance() const {
  return distance_;
}
inline float PointXYZIT::distance() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointXYZIT.distance)
  return _internal_distance();
}
inline void PointXYZIT::_internal_set_distance(float value) {
  _has_bits_[0] |= 0x00000010u;
  distance_ = value;
}
inline void PointXYZIT::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointXYZIT.distance)
}

// -------------------------------------------------------------------

// PointCloud

// optional .crdc.airi.Header header = 1;
inline bool PointCloud::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PointCloud::has_header() const {
  return _internal_has_header();
}
inline const ::crdc::airi::Header& PointCloud::_internal_header() const {
  const ::crdc::airi::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Header&>(
      ::crdc::airi::_Header_default_instance_);
}
inline const ::crdc::airi::Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud.header)
  return _internal_header();
}
inline void PointCloud::unsafe_arena_set_allocated_header(
    ::crdc::airi::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.PointCloud.header)
}
inline ::crdc::airi::Header* PointCloud::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Header* PointCloud::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:crdc.airi.PointCloud.header)
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::crdc::airi::Header* PointCloud::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::crdc::airi::Header* PointCloud::mutable_header() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointCloud.header)
  return _internal_mutable_header();
}
inline void PointCloud::set_allocated_header(::crdc::airi::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.PointCloud.header)
}

// repeated .crdc.airi.PointXYZIT point = 2;
inline int PointCloud::_internal_point_size() const {
  return point_.size();
}
inline int PointCloud::point_size() const {
  return _internal_point_size();
}
inline void PointCloud::clear_point() {
  point_.Clear();
}
inline ::crdc::airi::PointXYZIT* PointCloud::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointCloud.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointXYZIT >*
PointCloud::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:crdc.airi.PointCloud.point)
  return &point_;
}
inline const ::crdc::airi::PointXYZIT& PointCloud::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::crdc::airi::PointXYZIT& PointCloud::point(int index) const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud.point)
  return _internal_point(index);
}
inline ::crdc::airi::PointXYZIT* PointCloud::_internal_add_point() {
  return point_.Add();
}
inline ::crdc::airi::PointXYZIT* PointCloud::add_point() {
  // @@protoc_insertion_point(field_add:crdc.airi.PointCloud.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointXYZIT >&
PointCloud::point() const {
  // @@protoc_insertion_point(field_list:crdc.airi.PointCloud.point)
  return point_;
}

// optional bool is_dense = 3;
inline bool PointCloud::_internal_has_is_dense() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointCloud::has_is_dense() const {
  return _internal_has_is_dense();
}
inline void PointCloud::clear_is_dense() {
  is_dense_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PointCloud::_internal_is_dense() const {
  return is_dense_;
}
inline bool PointCloud::is_dense() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud.is_dense)
  return _internal_is_dense();
}
inline void PointCloud::_internal_set_is_dense(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_dense_ = value;
}
inline void PointCloud::set_is_dense(bool value) {
  _internal_set_is_dense(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud.is_dense)
}

// optional double measurement_time = 5;
inline bool PointCloud::_internal_has_measurement_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointCloud::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void PointCloud::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PointCloud::_internal_measurement_time() const {
  return measurement_time_;
}
inline double PointCloud::measurement_time() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud.measurement_time)
  return _internal_measurement_time();
}
inline void PointCloud::_internal_set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  measurement_time_ = value;
}
inline void PointCloud::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud.measurement_time)
}

// optional uint32 width = 6;
inline bool PointCloud::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloud::has_width() const {
  return _internal_has_width();
}
inline void PointCloud::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::width() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud.width)
  return _internal_width();
}
inline void PointCloud::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void PointCloud::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud.width)
}

// optional uint32 height = 7;
inline bool PointCloud::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointCloud::has_height() const {
  return _internal_has_height();
}
inline void PointCloud::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud::height() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud.height)
  return _internal_height();
}
inline void PointCloud::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  height_ = value;
}
inline void PointCloud::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud.height)
}

// -------------------------------------------------------------------

// PointClouds

// optional .crdc.airi.Header header = 1;
inline bool PointClouds::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PointClouds::has_header() const {
  return _internal_has_header();
}
inline const ::crdc::airi::Header& PointClouds::_internal_header() const {
  const ::crdc::airi::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Header&>(
      ::crdc::airi::_Header_default_instance_);
}
inline const ::crdc::airi::Header& PointClouds::header() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointClouds.header)
  return _internal_header();
}
inline void PointClouds::unsafe_arena_set_allocated_header(
    ::crdc::airi::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.PointClouds.header)
}
inline ::crdc::airi::Header* PointClouds::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Header* PointClouds::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:crdc.airi.PointClouds.header)
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::crdc::airi::Header* PointClouds::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::crdc::airi::Header* PointClouds::mutable_header() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointClouds.header)
  return _internal_mutable_header();
}
inline void PointClouds::set_allocated_header(::crdc::airi::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.PointClouds.header)
}

// repeated .crdc.airi.PointCloud clouds = 2;
inline int PointClouds::_internal_clouds_size() const {
  return clouds_.size();
}
inline int PointClouds::clouds_size() const {
  return _internal_clouds_size();
}
inline void PointClouds::clear_clouds() {
  clouds_.Clear();
}
inline ::crdc::airi::PointCloud* PointClouds::mutable_clouds(int index) {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointClouds.clouds)
  return clouds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud >*
PointClouds::mutable_clouds() {
  // @@protoc_insertion_point(field_mutable_list:crdc.airi.PointClouds.clouds)
  return &clouds_;
}
inline const ::crdc::airi::PointCloud& PointClouds::_internal_clouds(int index) const {
  return clouds_.Get(index);
}
inline const ::crdc::airi::PointCloud& PointClouds::clouds(int index) const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointClouds.clouds)
  return _internal_clouds(index);
}
inline ::crdc::airi::PointCloud* PointClouds::_internal_add_clouds() {
  return clouds_.Add();
}
inline ::crdc::airi::PointCloud* PointClouds::add_clouds() {
  // @@protoc_insertion_point(field_add:crdc.airi.PointClouds.clouds)
  return _internal_add_clouds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud >&
PointClouds::clouds() const {
  // @@protoc_insertion_point(field_list:crdc.airi.PointClouds.clouds)
  return clouds_;
}

// -------------------------------------------------------------------

// PointField

// optional string name = 1;
inline bool PointField::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointField::has_name() const {
  return _internal_has_name();
}
inline void PointField::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PointField::name() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointField.name)
  return _internal_name();
}
inline void PointField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointField.name)
}
inline std::string* PointField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointField.name)
  return _internal_mutable_name();
}
inline const std::string& PointField::_internal_name() const {
  return name_.Get();
}
inline void PointField::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PointField::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crdc.airi.PointField.name)
}
inline void PointField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:crdc.airi.PointField.name)
}
inline void PointField::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crdc.airi.PointField.name)
}
inline std::string* PointField::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointField::release_name() {
  // @@protoc_insertion_point(field_release:crdc.airi.PointField.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.PointField.name)
}

// optional .crdc.airi.PointField.PointFieldType datatype = 2;
inline bool PointField::_internal_has_datatype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointField::has_datatype() const {
  return _internal_has_datatype();
}
inline void PointField::clear_datatype() {
  datatype_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::crdc::airi::PointField_PointFieldType PointField::_internal_datatype() const {
  return static_cast< ::crdc::airi::PointField_PointFieldType >(datatype_);
}
inline ::crdc::airi::PointField_PointFieldType PointField::datatype() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointField.datatype)
  return _internal_datatype();
}
inline void PointField::_internal_set_datatype(::crdc::airi::PointField_PointFieldType value) {
  assert(::crdc::airi::PointField_PointFieldType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  datatype_ = value;
}
inline void PointField::set_datatype(::crdc::airi::PointField_PointFieldType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointField.datatype)
}

// optional uint32 offset = 3;
inline bool PointField::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointField::has_offset() const {
  return _internal_has_offset();
}
inline void PointField::clear_offset() {
  offset_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::offset() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointField.offset)
  return _internal_offset();
}
inline void PointField::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void PointField::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointField.offset)
}

// optional uint32 count = 4;
inline bool PointField::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointField::has_count() const {
  return _internal_has_count();
}
inline void PointField::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointField::count() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointField.count)
  return _internal_count();
}
inline void PointField::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void PointField::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointField.count)
}

// -------------------------------------------------------------------

// PointCloud2

// optional .crdc.airi.Header header = 1;
inline bool PointCloud2::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PointCloud2::has_header() const {
  return _internal_has_header();
}
inline const ::crdc::airi::Header& PointCloud2::_internal_header() const {
  const ::crdc::airi::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Header&>(
      ::crdc::airi::_Header_default_instance_);
}
inline const ::crdc::airi::Header& PointCloud2::header() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.header)
  return _internal_header();
}
inline void PointCloud2::unsafe_arena_set_allocated_header(
    ::crdc::airi::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.PointCloud2.header)
}
inline ::crdc::airi::Header* PointCloud2::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Header* PointCloud2::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:crdc.airi.PointCloud2.header)
  _has_bits_[0] &= ~0x00000002u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::crdc::airi::Header* PointCloud2::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::crdc::airi::Header* PointCloud2::mutable_header() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointCloud2.header)
  return _internal_mutable_header();
}
inline void PointCloud2::set_allocated_header(::crdc::airi::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.PointCloud2.header)
}

// repeated .crdc.airi.PointField fields = 2;
inline int PointCloud2::_internal_fields_size() const {
  return fields_.size();
}
inline int PointCloud2::fields_size() const {
  return _internal_fields_size();
}
inline void PointCloud2::clear_fields() {
  fields_.Clear();
}
inline ::crdc::airi::PointField* PointCloud2::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointCloud2.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointField >*
PointCloud2::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:crdc.airi.PointCloud2.fields)
  return &fields_;
}
inline const ::crdc::airi::PointField& PointCloud2::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::crdc::airi::PointField& PointCloud2::fields(int index) const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.fields)
  return _internal_fields(index);
}
inline ::crdc::airi::PointField* PointCloud2::_internal_add_fields() {
  return fields_.Add();
}
inline ::crdc::airi::PointField* PointCloud2::add_fields() {
  // @@protoc_insertion_point(field_add:crdc.airi.PointCloud2.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointField >&
PointCloud2::fields() const {
  // @@protoc_insertion_point(field_list:crdc.airi.PointCloud2.fields)
  return fields_;
}

// optional bytes data = 3;
inline bool PointCloud2::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointCloud2::has_data() const {
  return _internal_has_data();
}
inline void PointCloud2::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PointCloud2::data() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.data)
  return _internal_data();
}
inline void PointCloud2::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.data)
}
inline std::string* PointCloud2::mutable_data() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointCloud2.data)
  return _internal_mutable_data();
}
inline const std::string& PointCloud2::_internal_data() const {
  return data_.Get();
}
inline void PointCloud2::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PointCloud2::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crdc.airi.PointCloud2.data)
}
inline void PointCloud2::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:crdc.airi.PointCloud2.data)
}
inline void PointCloud2::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crdc.airi.PointCloud2.data)
}
inline std::string* PointCloud2::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PointCloud2::release_data() {
  // @@protoc_insertion_point(field_release:crdc.airi.PointCloud2.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloud2::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.PointCloud2.data)
}

// optional uint32 height = 4;
inline bool PointCloud2::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointCloud2::has_height() const {
  return _internal_has_height();
}
inline void PointCloud2::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::height() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.height)
  return _internal_height();
}
inline void PointCloud2::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void PointCloud2::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.height)
}

// optional uint32 width = 5;
inline bool PointCloud2::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PointCloud2::has_width() const {
  return _internal_has_width();
}
inline void PointCloud2::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::width() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.width)
  return _internal_width();
}
inline void PointCloud2::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  width_ = value;
}
inline void PointCloud2::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.width)
}

// optional uint32 point_step = 6;
inline bool PointCloud2::_internal_has_point_step() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PointCloud2::has_point_step() const {
  return _internal_has_point_step();
}
inline void PointCloud2::clear_point_step() {
  point_step_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_point_step() const {
  return point_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::point_step() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.point_step)
  return _internal_point_step();
}
inline void PointCloud2::_internal_set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  point_step_ = value;
}
inline void PointCloud2::set_point_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_step(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.point_step)
}

// optional uint32 row_step = 7;
inline bool PointCloud2::_internal_has_row_step() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PointCloud2::has_row_step() const {
  return _internal_has_row_step();
}
inline void PointCloud2::clear_row_step() {
  row_step_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::_internal_row_step() const {
  return row_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointCloud2::row_step() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.row_step)
  return _internal_row_step();
}
inline void PointCloud2::_internal_set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  row_step_ = value;
}
inline void PointCloud2::set_row_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_step(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.row_step)
}

// optional bool is_dense = 8;
inline bool PointCloud2::_internal_has_is_dense() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PointCloud2::has_is_dense() const {
  return _internal_has_is_dense();
}
inline void PointCloud2::clear_is_dense() {
  is_dense_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PointCloud2::_internal_is_dense() const {
  return is_dense_;
}
inline bool PointCloud2::is_dense() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.is_dense)
  return _internal_is_dense();
}
inline void PointCloud2::_internal_set_is_dense(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_dense_ = value;
}
inline void PointCloud2::set_is_dense(bool value) {
  _internal_set_is_dense(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.is_dense)
}

// optional bool is_bigendian = 9;
inline bool PointCloud2::_internal_has_is_bigendian() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PointCloud2::has_is_bigendian() const {
  return _internal_has_is_bigendian();
}
inline void PointCloud2::clear_is_bigendian() {
  is_bigendian_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PointCloud2::_internal_is_bigendian() const {
  return is_bigendian_;
}
inline bool PointCloud2::is_bigendian() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointCloud2.is_bigendian)
  return _internal_is_bigendian();
}
inline void PointCloud2::_internal_set_is_bigendian(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_bigendian_ = value;
}
inline void PointCloud2::set_is_bigendian(bool value) {
  _internal_set_is_bigendian(value);
  // @@protoc_insertion_point(field_set:crdc.airi.PointCloud2.is_bigendian)
}

// -------------------------------------------------------------------

// PointClouds2

// optional .crdc.airi.Header header = 1;
inline bool PointClouds2::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PointClouds2::has_header() const {
  return _internal_has_header();
}
inline const ::crdc::airi::Header& PointClouds2::_internal_header() const {
  const ::crdc::airi::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Header&>(
      ::crdc::airi::_Header_default_instance_);
}
inline const ::crdc::airi::Header& PointClouds2::header() const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointClouds2.header)
  return _internal_header();
}
inline void PointClouds2::unsafe_arena_set_allocated_header(
    ::crdc::airi::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.PointClouds2.header)
}
inline ::crdc::airi::Header* PointClouds2::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Header* PointClouds2::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:crdc.airi.PointClouds2.header)
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::crdc::airi::Header* PointClouds2::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::crdc::airi::Header* PointClouds2::mutable_header() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointClouds2.header)
  return _internal_mutable_header();
}
inline void PointClouds2::set_allocated_header(::crdc::airi::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.PointClouds2.header)
}

// repeated .crdc.airi.PointCloud2 clouds = 2;
inline int PointClouds2::_internal_clouds_size() const {
  return clouds_.size();
}
inline int PointClouds2::clouds_size() const {
  return _internal_clouds_size();
}
inline void PointClouds2::clear_clouds() {
  clouds_.Clear();
}
inline ::crdc::airi::PointCloud2* PointClouds2::mutable_clouds(int index) {
  // @@protoc_insertion_point(field_mutable:crdc.airi.PointClouds2.clouds)
  return clouds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud2 >*
PointClouds2::mutable_clouds() {
  // @@protoc_insertion_point(field_mutable_list:crdc.airi.PointClouds2.clouds)
  return &clouds_;
}
inline const ::crdc::airi::PointCloud2& PointClouds2::_internal_clouds(int index) const {
  return clouds_.Get(index);
}
inline const ::crdc::airi::PointCloud2& PointClouds2::clouds(int index) const {
  // @@protoc_insertion_point(field_get:crdc.airi.PointClouds2.clouds)
  return _internal_clouds(index);
}
inline ::crdc::airi::PointCloud2* PointClouds2::_internal_add_clouds() {
  return clouds_.Add();
}
inline ::crdc::airi::PointCloud2* PointClouds2::add_clouds() {
  // @@protoc_insertion_point(field_add:crdc.airi.PointClouds2.clouds)
  return _internal_add_clouds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::crdc::airi::PointCloud2 >&
PointClouds2::clouds() const {
  // @@protoc_insertion_point(field_list:crdc.airi.PointClouds2.clouds)
  return clouds_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace airi
}  // namespace crdc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::crdc::airi::PointField_PointFieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::crdc::airi::PointField_PointFieldType>() {
  return ::crdc::airi::PointField_PointFieldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lidar_2eproto
