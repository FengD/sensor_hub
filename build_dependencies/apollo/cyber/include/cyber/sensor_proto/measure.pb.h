// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_measure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_measure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_measure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_measure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_measure_2eproto;
namespace crdc {
namespace airi {
class IntegMeasure;
class IntegMeasureDefaultTypeInternal;
extern IntegMeasureDefaultTypeInternal _IntegMeasure_default_instance_;
}  // namespace airi
}  // namespace crdc
PROTOBUF_NAMESPACE_OPEN
template<> ::crdc::airi::IntegMeasure* Arena::CreateMaybeMessage<::crdc::airi::IntegMeasure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace crdc {
namespace airi {

enum IntegMeasure_MeasureType : int {
  IntegMeasure_MeasureType_GNSS_POS_ONLY = 0,
  IntegMeasure_MeasureType_GNSS_POS_VEL = 1,
  IntegMeasure_MeasureType_GNSS_POS_XY = 2,
  IntegMeasure_MeasureType_GNSS_VEL_ONLY = 3,
  IntegMeasure_MeasureType_POINT_CLOUD_POS = 4,
  IntegMeasure_MeasureType_ODOMETER_VEL_ONLY = 5,
  IntegMeasure_MeasureType_VEHICLE_CONSTRAINT = 6
};
bool IntegMeasure_MeasureType_IsValid(int value);
constexpr IntegMeasure_MeasureType IntegMeasure_MeasureType_MeasureType_MIN = IntegMeasure_MeasureType_GNSS_POS_ONLY;
constexpr IntegMeasure_MeasureType IntegMeasure_MeasureType_MeasureType_MAX = IntegMeasure_MeasureType_VEHICLE_CONSTRAINT;
constexpr int IntegMeasure_MeasureType_MeasureType_ARRAYSIZE = IntegMeasure_MeasureType_MeasureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegMeasure_MeasureType_descriptor();
template<typename T>
inline const std::string& IntegMeasure_MeasureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntegMeasure_MeasureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntegMeasure_MeasureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntegMeasure_MeasureType_descriptor(), enum_t_value);
}
inline bool IntegMeasure_MeasureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntegMeasure_MeasureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntegMeasure_MeasureType>(
    IntegMeasure_MeasureType_descriptor(), name, value);
}
enum IntegMeasure_FrameType : int {
  IntegMeasure_FrameType_ENU = 0,
  IntegMeasure_FrameType_ECEF = 1,
  IntegMeasure_FrameType_UTM = 2,
  IntegMeasure_FrameType_ODOMETER = 3
};
bool IntegMeasure_FrameType_IsValid(int value);
constexpr IntegMeasure_FrameType IntegMeasure_FrameType_FrameType_MIN = IntegMeasure_FrameType_ENU;
constexpr IntegMeasure_FrameType IntegMeasure_FrameType_FrameType_MAX = IntegMeasure_FrameType_ODOMETER;
constexpr int IntegMeasure_FrameType_FrameType_ARRAYSIZE = IntegMeasure_FrameType_FrameType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegMeasure_FrameType_descriptor();
template<typename T>
inline const std::string& IntegMeasure_FrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntegMeasure_FrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntegMeasure_FrameType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntegMeasure_FrameType_descriptor(), enum_t_value);
}
inline bool IntegMeasure_FrameType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntegMeasure_FrameType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntegMeasure_FrameType>(
    IntegMeasure_FrameType_descriptor(), name, value);
}
// ===================================================================

class IntegMeasure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crdc.airi.IntegMeasure) */ {
 public:
  inline IntegMeasure() : IntegMeasure(nullptr) {}
  virtual ~IntegMeasure();

  IntegMeasure(const IntegMeasure& from);
  IntegMeasure(IntegMeasure&& from) noexcept
    : IntegMeasure() {
    *this = ::std::move(from);
  }

  inline IntegMeasure& operator=(const IntegMeasure& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegMeasure& operator=(IntegMeasure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegMeasure& default_instance();

  static inline const IntegMeasure* internal_default_instance() {
    return reinterpret_cast<const IntegMeasure*>(
               &_IntegMeasure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntegMeasure& a, IntegMeasure& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegMeasure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegMeasure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegMeasure* New() const final {
    return CreateMaybeMessage<IntegMeasure>(nullptr);
  }

  IntegMeasure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegMeasure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegMeasure& from);
  void MergeFrom(const IntegMeasure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegMeasure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crdc.airi.IntegMeasure";
  }
  protected:
  explicit IntegMeasure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_measure_2eproto);
    return ::descriptor_table_measure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IntegMeasure_MeasureType MeasureType;
  static constexpr MeasureType GNSS_POS_ONLY =
    IntegMeasure_MeasureType_GNSS_POS_ONLY;
  static constexpr MeasureType GNSS_POS_VEL =
    IntegMeasure_MeasureType_GNSS_POS_VEL;
  static constexpr MeasureType GNSS_POS_XY =
    IntegMeasure_MeasureType_GNSS_POS_XY;
  static constexpr MeasureType GNSS_VEL_ONLY =
    IntegMeasure_MeasureType_GNSS_VEL_ONLY;
  static constexpr MeasureType POINT_CLOUD_POS =
    IntegMeasure_MeasureType_POINT_CLOUD_POS;
  static constexpr MeasureType ODOMETER_VEL_ONLY =
    IntegMeasure_MeasureType_ODOMETER_VEL_ONLY;
  static constexpr MeasureType VEHICLE_CONSTRAINT =
    IntegMeasure_MeasureType_VEHICLE_CONSTRAINT;
  static inline bool MeasureType_IsValid(int value) {
    return IntegMeasure_MeasureType_IsValid(value);
  }
  static constexpr MeasureType MeasureType_MIN =
    IntegMeasure_MeasureType_MeasureType_MIN;
  static constexpr MeasureType MeasureType_MAX =
    IntegMeasure_MeasureType_MeasureType_MAX;
  static constexpr int MeasureType_ARRAYSIZE =
    IntegMeasure_MeasureType_MeasureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MeasureType_descriptor() {
    return IntegMeasure_MeasureType_descriptor();
  }
  template<typename T>
  static inline const std::string& MeasureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MeasureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MeasureType_Name.");
    return IntegMeasure_MeasureType_Name(enum_t_value);
  }
  static inline bool MeasureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MeasureType* value) {
    return IntegMeasure_MeasureType_Parse(name, value);
  }

  typedef IntegMeasure_FrameType FrameType;
  static constexpr FrameType ENU =
    IntegMeasure_FrameType_ENU;
  static constexpr FrameType ECEF =
    IntegMeasure_FrameType_ECEF;
  static constexpr FrameType UTM =
    IntegMeasure_FrameType_UTM;
  static constexpr FrameType ODOMETER =
    IntegMeasure_FrameType_ODOMETER;
  static inline bool FrameType_IsValid(int value) {
    return IntegMeasure_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN =
    IntegMeasure_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX =
    IntegMeasure_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE =
    IntegMeasure_FrameType_FrameType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameType_descriptor() {
    return IntegMeasure_FrameType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameType_Name.");
    return IntegMeasure_FrameType_Name(enum_t_value);
  }
  static inline bool FrameType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrameType* value) {
    return IntegMeasure_FrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureCovarFieldNumber = 10,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kMeasureTypeFieldNumber = 2,
    kFrameTypeFieldNumber = 3,
    kYawFieldNumber = 6,
    kZoneIdFieldNumber = 7,
    kIsHaveVarianceFieldNumber = 8,
    kIsGnssDoubleAntennaFieldNumber = 9,
  };
  // repeated double measure_covar = 10 [packed = true];
  int measure_covar_size() const;
  private:
  int _internal_measure_covar_size() const;
  public:
  void clear_measure_covar();
  private:
  double _internal_measure_covar(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_measure_covar() const;
  void _internal_add_measure_covar(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_measure_covar();
  public:
  double measure_covar(int index) const;
  void set_measure_covar(int index, double value);
  void add_measure_covar(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      measure_covar() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_measure_covar();

  // optional .crdc.airi.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::crdc::airi::Header& header() const;
  ::crdc::airi::Header* release_header();
  ::crdc::airi::Header* mutable_header();
  void set_allocated_header(::crdc::airi::Header* header);
  private:
  const ::crdc::airi::Header& _internal_header() const;
  ::crdc::airi::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::crdc::airi::Header* header);
  ::crdc::airi::Header* unsafe_arena_release_header();

  // optional .crdc.airi.Point3D position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::crdc::airi::Point3D& position() const;
  ::crdc::airi::Point3D* release_position();
  ::crdc::airi::Point3D* mutable_position();
  void set_allocated_position(::crdc::airi::Point3D* position);
  private:
  const ::crdc::airi::Point3D& _internal_position() const;
  ::crdc::airi::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::crdc::airi::Point3D* position);
  ::crdc::airi::Point3D* unsafe_arena_release_position();

  // optional .crdc.airi.Point3D velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::crdc::airi::Point3D& velocity() const;
  ::crdc::airi::Point3D* release_velocity();
  ::crdc::airi::Point3D* mutable_velocity();
  void set_allocated_velocity(::crdc::airi::Point3D* velocity);
  private:
  const ::crdc::airi::Point3D& _internal_velocity() const;
  ::crdc::airi::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::crdc::airi::Point3D* velocity);
  ::crdc::airi::Point3D* unsafe_arena_release_velocity();

  // optional .crdc.airi.IntegMeasure.MeasureType measure_type = 2;
  bool has_measure_type() const;
  private:
  bool _internal_has_measure_type() const;
  public:
  void clear_measure_type();
  ::crdc::airi::IntegMeasure_MeasureType measure_type() const;
  void set_measure_type(::crdc::airi::IntegMeasure_MeasureType value);
  private:
  ::crdc::airi::IntegMeasure_MeasureType _internal_measure_type() const;
  void _internal_set_measure_type(::crdc::airi::IntegMeasure_MeasureType value);
  public:

  // optional .crdc.airi.IntegMeasure.FrameType frame_type = 3;
  bool has_frame_type() const;
  private:
  bool _internal_has_frame_type() const;
  public:
  void clear_frame_type();
  ::crdc::airi::IntegMeasure_FrameType frame_type() const;
  void set_frame_type(::crdc::airi::IntegMeasure_FrameType value);
  private:
  ::crdc::airi::IntegMeasure_FrameType _internal_frame_type() const;
  void _internal_set_frame_type(::crdc::airi::IntegMeasure_FrameType value);
  public:

  // optional double yaw = 6;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // optional int32 zone_id = 7;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  ::PROTOBUF_NAMESPACE_ID::int32 zone_id() const;
  void set_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zone_id() const;
  void _internal_set_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_have_variance = 8;
  bool has_is_have_variance() const;
  private:
  bool _internal_has_is_have_variance() const;
  public:
  void clear_is_have_variance();
  bool is_have_variance() const;
  void set_is_have_variance(bool value);
  private:
  bool _internal_is_have_variance() const;
  void _internal_set_is_have_variance(bool value);
  public:

  // optional bool is_gnss_double_antenna = 9;
  bool has_is_gnss_double_antenna() const;
  private:
  bool _internal_has_is_gnss_double_antenna() const;
  public:
  void clear_is_gnss_double_antenna();
  bool is_gnss_double_antenna() const;
  void set_is_gnss_double_antenna(bool value);
  private:
  bool _internal_is_gnss_double_antenna() const;
  void _internal_set_is_gnss_double_antenna(bool value);
  public:

  // @@protoc_insertion_point(class_scope:crdc.airi.IntegMeasure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > measure_covar_;
  mutable std::atomic<int> _measure_covar_cached_byte_size_;
  ::crdc::airi::Header* header_;
  ::crdc::airi::Point3D* position_;
  ::crdc::airi::Point3D* velocity_;
  int measure_type_;
  int frame_type_;
  double yaw_;
  ::PROTOBUF_NAMESPACE_ID::int32 zone_id_;
  bool is_have_variance_;
  bool is_gnss_double_antenna_;
  friend struct ::TableStruct_measure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntegMeasure

// optional .crdc.airi.Header header = 1;
inline bool IntegMeasure::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool IntegMeasure::has_header() const {
  return _internal_has_header();
}
inline const ::crdc::airi::Header& IntegMeasure::_internal_header() const {
  const ::crdc::airi::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Header&>(
      ::crdc::airi::_Header_default_instance_);
}
inline const ::crdc::airi::Header& IntegMeasure::header() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.header)
  return _internal_header();
}
inline void IntegMeasure::unsafe_arena_set_allocated_header(
    ::crdc::airi::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.IntegMeasure.header)
}
inline ::crdc::airi::Header* IntegMeasure::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Header* IntegMeasure::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:crdc.airi.IntegMeasure.header)
  _has_bits_[0] &= ~0x00000001u;
  ::crdc::airi::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::crdc::airi::Header* IntegMeasure::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::crdc::airi::Header* IntegMeasure::mutable_header() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.IntegMeasure.header)
  return _internal_mutable_header();
}
inline void IntegMeasure::set_allocated_header(::crdc::airi::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.IntegMeasure.header)
}

// optional .crdc.airi.IntegMeasure.MeasureType measure_type = 2;
inline bool IntegMeasure::_internal_has_measure_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IntegMeasure::has_measure_type() const {
  return _internal_has_measure_type();
}
inline void IntegMeasure::clear_measure_type() {
  measure_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::crdc::airi::IntegMeasure_MeasureType IntegMeasure::_internal_measure_type() const {
  return static_cast< ::crdc::airi::IntegMeasure_MeasureType >(measure_type_);
}
inline ::crdc::airi::IntegMeasure_MeasureType IntegMeasure::measure_type() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.measure_type)
  return _internal_measure_type();
}
inline void IntegMeasure::_internal_set_measure_type(::crdc::airi::IntegMeasure_MeasureType value) {
  assert(::crdc::airi::IntegMeasure_MeasureType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  measure_type_ = value;
}
inline void IntegMeasure::set_measure_type(::crdc::airi::IntegMeasure_MeasureType value) {
  _internal_set_measure_type(value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.measure_type)
}

// optional .crdc.airi.IntegMeasure.FrameType frame_type = 3;
inline bool IntegMeasure::_internal_has_frame_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IntegMeasure::has_frame_type() const {
  return _internal_has_frame_type();
}
inline void IntegMeasure::clear_frame_type() {
  frame_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::crdc::airi::IntegMeasure_FrameType IntegMeasure::_internal_frame_type() const {
  return static_cast< ::crdc::airi::IntegMeasure_FrameType >(frame_type_);
}
inline ::crdc::airi::IntegMeasure_FrameType IntegMeasure::frame_type() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.frame_type)
  return _internal_frame_type();
}
inline void IntegMeasure::_internal_set_frame_type(::crdc::airi::IntegMeasure_FrameType value) {
  assert(::crdc::airi::IntegMeasure_FrameType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  frame_type_ = value;
}
inline void IntegMeasure::set_frame_type(::crdc::airi::IntegMeasure_FrameType value) {
  _internal_set_frame_type(value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.frame_type)
}

// optional .crdc.airi.Point3D position = 4;
inline bool IntegMeasure::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool IntegMeasure::has_position() const {
  return _internal_has_position();
}
inline const ::crdc::airi::Point3D& IntegMeasure::_internal_position() const {
  const ::crdc::airi::Point3D* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Point3D&>(
      ::crdc::airi::_Point3D_default_instance_);
}
inline const ::crdc::airi::Point3D& IntegMeasure::position() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.position)
  return _internal_position();
}
inline void IntegMeasure::unsafe_arena_set_allocated_position(
    ::crdc::airi::Point3D* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.IntegMeasure.position)
}
inline ::crdc::airi::Point3D* IntegMeasure::release_position() {
  _has_bits_[0] &= ~0x00000002u;
  ::crdc::airi::Point3D* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Point3D* IntegMeasure::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:crdc.airi.IntegMeasure.position)
  _has_bits_[0] &= ~0x00000002u;
  ::crdc::airi::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::crdc::airi::Point3D* IntegMeasure::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Point3D>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::crdc::airi::Point3D* IntegMeasure::mutable_position() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.IntegMeasure.position)
  return _internal_mutable_position();
}
inline void IntegMeasure::set_allocated_position(::crdc::airi::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.IntegMeasure.position)
}

// optional .crdc.airi.Point3D velocity = 5;
inline bool IntegMeasure::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool IntegMeasure::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::crdc::airi::Point3D& IntegMeasure::_internal_velocity() const {
  const ::crdc::airi::Point3D* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::crdc::airi::Point3D&>(
      ::crdc::airi::_Point3D_default_instance_);
}
inline const ::crdc::airi::Point3D& IntegMeasure::velocity() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.velocity)
  return _internal_velocity();
}
inline void IntegMeasure::unsafe_arena_set_allocated_velocity(
    ::crdc::airi::Point3D* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crdc.airi.IntegMeasure.velocity)
}
inline ::crdc::airi::Point3D* IntegMeasure::release_velocity() {
  _has_bits_[0] &= ~0x00000004u;
  ::crdc::airi::Point3D* temp = velocity_;
  velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::crdc::airi::Point3D* IntegMeasure::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:crdc.airi.IntegMeasure.velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::crdc::airi::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::crdc::airi::Point3D* IntegMeasure::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::crdc::airi::Point3D>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::crdc::airi::Point3D* IntegMeasure::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:crdc.airi.IntegMeasure.velocity)
  return _internal_mutable_velocity();
}
inline void IntegMeasure::set_allocated_velocity(::crdc::airi::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity)->GetArena();
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:crdc.airi.IntegMeasure.velocity)
}

// optional double yaw = 6;
inline bool IntegMeasure::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IntegMeasure::has_yaw() const {
  return _internal_has_yaw();
}
inline void IntegMeasure::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double IntegMeasure::_internal_yaw() const {
  return yaw_;
}
inline double IntegMeasure::yaw() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.yaw)
  return _internal_yaw();
}
inline void IntegMeasure::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000020u;
  yaw_ = value;
}
inline void IntegMeasure::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.yaw)
}

// optional int32 zone_id = 7;
inline bool IntegMeasure::_internal_has_zone_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool IntegMeasure::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void IntegMeasure::clear_zone_id() {
  zone_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegMeasure::_internal_zone_id() const {
  return zone_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegMeasure::zone_id() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.zone_id)
  return _internal_zone_id();
}
inline void IntegMeasure::_internal_set_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  zone_id_ = value;
}
inline void IntegMeasure::set_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.zone_id)
}

// optional bool is_have_variance = 8;
inline bool IntegMeasure::_internal_has_is_have_variance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool IntegMeasure::has_is_have_variance() const {
  return _internal_has_is_have_variance();
}
inline void IntegMeasure::clear_is_have_variance() {
  is_have_variance_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool IntegMeasure::_internal_is_have_variance() const {
  return is_have_variance_;
}
inline bool IntegMeasure::is_have_variance() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.is_have_variance)
  return _internal_is_have_variance();
}
inline void IntegMeasure::_internal_set_is_have_variance(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_have_variance_ = value;
}
inline void IntegMeasure::set_is_have_variance(bool value) {
  _internal_set_is_have_variance(value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.is_have_variance)
}

// optional bool is_gnss_double_antenna = 9;
inline bool IntegMeasure::_internal_has_is_gnss_double_antenna() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool IntegMeasure::has_is_gnss_double_antenna() const {
  return _internal_has_is_gnss_double_antenna();
}
inline void IntegMeasure::clear_is_gnss_double_antenna() {
  is_gnss_double_antenna_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool IntegMeasure::_internal_is_gnss_double_antenna() const {
  return is_gnss_double_antenna_;
}
inline bool IntegMeasure::is_gnss_double_antenna() const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.is_gnss_double_antenna)
  return _internal_is_gnss_double_antenna();
}
inline void IntegMeasure::_internal_set_is_gnss_double_antenna(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_gnss_double_antenna_ = value;
}
inline void IntegMeasure::set_is_gnss_double_antenna(bool value) {
  _internal_set_is_gnss_double_antenna(value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.is_gnss_double_antenna)
}

// repeated double measure_covar = 10 [packed = true];
inline int IntegMeasure::_internal_measure_covar_size() const {
  return measure_covar_.size();
}
inline int IntegMeasure::measure_covar_size() const {
  return _internal_measure_covar_size();
}
inline void IntegMeasure::clear_measure_covar() {
  measure_covar_.Clear();
}
inline double IntegMeasure::_internal_measure_covar(int index) const {
  return measure_covar_.Get(index);
}
inline double IntegMeasure::measure_covar(int index) const {
  // @@protoc_insertion_point(field_get:crdc.airi.IntegMeasure.measure_covar)
  return _internal_measure_covar(index);
}
inline void IntegMeasure::set_measure_covar(int index, double value) {
  measure_covar_.Set(index, value);
  // @@protoc_insertion_point(field_set:crdc.airi.IntegMeasure.measure_covar)
}
inline void IntegMeasure::_internal_add_measure_covar(double value) {
  measure_covar_.Add(value);
}
inline void IntegMeasure::add_measure_covar(double value) {
  _internal_add_measure_covar(value);
  // @@protoc_insertion_point(field_add:crdc.airi.IntegMeasure.measure_covar)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntegMeasure::_internal_measure_covar() const {
  return measure_covar_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntegMeasure::measure_covar() const {
  // @@protoc_insertion_point(field_list:crdc.airi.IntegMeasure.measure_covar)
  return _internal_measure_covar();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntegMeasure::_internal_mutable_measure_covar() {
  return &measure_covar_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntegMeasure::mutable_measure_covar() {
  // @@protoc_insertion_point(field_mutable_list:crdc.airi.IntegMeasure.measure_covar)
  return _internal_mutable_measure_covar();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace airi
}  // namespace crdc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::crdc::airi::IntegMeasure_MeasureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::crdc::airi::IntegMeasure_MeasureType>() {
  return ::crdc::airi::IntegMeasure_MeasureType_descriptor();
}
template <> struct is_proto_enum< ::crdc::airi::IntegMeasure_FrameType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::crdc::airi::IntegMeasure_FrameType>() {
  return ::crdc::airi::IntegMeasure_FrameType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_measure_2eproto
