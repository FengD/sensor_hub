syntax = "proto2";

package crdc.airi;

import "error_code.proto";
import "geometry.proto";
import "header.proto";

message BBox2D {
  optional double xmin = 1;  // in pixels.
  optional double ymin = 2;  // in pixels.
  optional double xmax = 3;  // in pixels.
  optional double ymax = 4;  // in pixels.
}

message Box {
  enum EdgeState {
    UNKNOWN = 0;
    OCCLUDED = 1;
    MEASURED = 2;
    MEMORIED = 3;
    INFERRED = 4;
  };
  optional Point3D position = 1;
  optional double theta = 2;
  optional double length = 3;
  optional double width = 4;
  optional double height = 5;
  optional EdgeState length_state = 6 [default = UNKNOWN];
  optional EdgeState width_state = 7 [default = UNKNOWN];
}

message LightStatus {
  optional double brake_visible = 1;
  optional double brake_switch_on = 2;
  optional double left_turn_visible = 3;
  optional double left_turn_switch_on = 4;
  optional double right_turn_visible = 5;
  optional double right_turn_switch_on = 6;

  enum VisibleType {
    INVALID = 0;
    SWITCH_ON = 1;
    SWITCH_OFF = 2;
  };

  message LampStates {
    enum LampState {
      UNKNOWN = 0;
      SWITCH_ON = 1;
      SWITCH_OFF = 2;
    };
    optional LampState brake_lamp_state = 1;
    optional LampState left_turn_lamp_state = 2;
    optional LampState right_turn_lamp_state = 3;
    optional LampState flash_lamp_state = 4;
  };
  optional VisibleType visible_type = 7;
  optional LampStates lamp_states = 8;
}

message PedestrianActivity {
  enum ActivityType {
    UNKNOWN = 0;
    STANDING = 1;
    WALKING = 2;
    SITTING = 3;
    CIRCUSEE = 4;
    WANDERING = 5;
  }
  optional ActivityType activity = 1 [default = UNKNOWN];
}

message SensorMeasurement {
  optional string sensor_id = 1;
  optional int32 id = 2;

  optional Point3D position = 3;
  optional double theta = 4;
  optional double length = 5;
  optional double width = 6;
  optional double height = 7;

  optional Point3D velocity = 8;

  optional PerceptionObstacle.Type type = 9;
  optional PerceptionObstacle.SubType sub_type = 10;
  optional double timestamp = 11;
  optional BBox2D box = 12;  // only for camera measurements
}

message PerceptionObstacle {
  optional int32 id = 1;  // obstacle ID.

  // obstacle position in the world coordinate system.
  optional Point3D position = 2;

  optional double theta = 3;  // heading in the world coordinate system.
  optional Point3D velocity = 4;  // obstacle velocity.

  // Size of obstacle bounding box.
  optional double length = 5;  // obstacle length.
  optional double width = 6;   // obstacle width.
  optional double height = 7;  // obstacle height.

  repeated Point3D polygon_point = 8;  // obstacle corner points.

  // duration of an obstacle since detection in s.
  optional double tracking_time = 9;

  enum Type {
    VEHICLE = 0;     // Passenger car or truck.
    UNKNOWN_MOVABLE = 1;
    UNKNOWN_UNMOVABLE = 2;
    PEDESTRIAN = 3;  // Pedestrian, usually determined by moving behavior.
    BICYCLE = 4;     // bike, motor bike
    UNKNOWN = 5;
  };
  optional Type type = 10;         // obstacle type
  optional double timestamp = 11;  // GPS time in seconds.

  // Just for offline debugging, will not fill this field onboard.
  // Format: [x0, y0, z0, x1, y1, z1...]
  repeated double point_cloud = 12 [packed = true];

  optional double confidence = 13 [deprecated = true];
  enum ConfidenceType {
    CONFIDENCE_UNKNOWN = 0;
    CONFIDENCE_CNN = 1;
    CONFIDENCE_RADAR = 2;
  };
  optional ConfidenceType confidence_type = 14 [deprecated = true];
  // trajectory of object.
  repeated Point3D drops = 15 [deprecated = true];

  // The following fields are new added in adlab 4.0
  optional Point3D acceleration = 16;  // obstacle acceleration

  // a stable obstacle point in the world coordinate system
  // position defined above is the obstacle bounding box ground center
  optional Point3D anchor_point = 17;
  optional BBox2D bbox2d = 18;

  enum SubType {
    ST_UNKNOWN = 0;
    ST_UNKNOWN_MOVABLE = 1;
    ST_UNKNOWN_UNMOVABLE = 2;
    ST_CAR = 3;
    ST_VAN = 4;
    ST_TRUCK = 5;
    ST_BUS = 6;
    ST_CYCLIST = 7;
    ST_MOTORCYCLIST = 8;
    ST_TRICYCLIST = 9;
    ST_PEDESTRIAN = 10;
    ST_TRAFFICCONE = 11;
    st_UNKNOWN_UNMOVABLE_TRAFFIC_CONE = 12;
    st_UNKNOWN_UNMOVABLE_TRAFFIC_PILE = 13;
    st_UNKNOWN_UNMOVABLE_FENCE = 14;
    st_UNKNOWN_UNMOVABLE_WATER_SAFETY_BARRIER = 15;
    st_UNKNOWN_UNMOVABLE_TERRIAN = 16;
    st_UNKNOWN_UNMOVABLE_VEGETATION = 17;
    st_UNKNOWN_UNMOVABLE_ROAD = 18;
  };

  optional SubType sub_type = 19;  // obstacle sub_type

  repeated SensorMeasurement measurements = 20;  // sensor measurements

  // orthogonal distance between obstacle lowest point and ground plane
  optional double height_above_ground = 21 [default = nan];

  // position covariance which is a row-majored 3x3 matrix
  repeated double position_covariance = 22 [packed = true];
  // velocity covariance which is a row-majored 3x3 matrix
  repeated double velocity_covariance = 23 [packed = true];
  // acceleration covariance which is a row-majored 3x3 matrix
  repeated double acceleration_covariance = 24 [packed = true];

  // lights of vehicles
  optional LightStatus light_status = 25;

  optional double yaw_rate = 26;  // the yaw rate of heading

  optional int32 track_status = 27; // -1: unknow, 0: static, 1: moving
  optional double track_status_reside_length = 28; // the duration time of track status, (s)

  enum ShapeType{
    POLYGON = 0;
    BBOX = 1;
  }
  optional ShapeType shapeType = 30 [default = BBOX];

  enum ObstacleSubType {
    // UNKNOWN
    SUB_TYPE_UNKNOWN = 0;

    // VEHICLE
    SUB_TYPE_VEHICLE_CAR = 32;
    SUB_TYPE_VEHICLE_XG = 33;
    SUB_TYPE_VEHICLE_EXPRESS = 34;
    SUB_TYPE_VEHICLE_OTHER = 35;

    // PEDESTRIAN
    SUB_TYPE_PEDESTRIAN_POLICE = 64;
    SUB_TYPE_PEDESTRIAN_CONSTRUCTER = 65;
    SUB_TYPE_PEDESTRIAN_CHILD = 66;
    SUB_TYPE_PEDESTRIAN_RIDER = 67;
    SUB_TYPE_PEDESTRIAN_OTHER = 68;
    SUB_TYPE_PEDESTRIAN_CHILD_BLIND = 69;

    // BICYCLE
    SUB_TYPE_BICYCLE_MOTORBICYCLE = 96;
    SUB_TYPE_BICYCLE_DELIVERYMAN = 97;
    SUB_TYPE_BICYCLE_MOTORTRICYCLE = 98;

    // TRUCK
    SUB_TYPE_TRUCK_BUS = 128;
    SUB_TYPE_TRUCK_CONSTRUCTION_VEHICLE = 129;
    SUB_TYPE_TRUCK_PICKUP = 130;
    SUB_TYPE_TRUCK_TRAILER_HEAD = 131;
    SUB_TYPE_TRUCK_TRAILER_CONTAINER = 132;
    SUB_TYPE_TRUCK_SPRINKLER = 133;
    SUB_TYPE_TRUCK_OTHER = 134;

    // GROUND
    SUB_TYPE_GROUND_LANE_DASHED = 160;
    SUB_TYPE_GROUND_LANE_SOLID = 161;
    SUB_TYPE_GROUND_LANE_STOP = 162;
    SUB_TYPE_GROUND_SIDE_WALK = 163;
    SUB_TYPE_GROUND_CROSS_WALK = 164;
    SUB_TYPE_GROUND_ROAD = 165;
    SUB_TYPE_GROUND_ROAD_SIGN = 166;
    SUB_TYPE_GROUND_OTHER = 167;
    SUB_TYPE_GROUND_RUGGED_ROAD = 168;
    SUB_TYPE_GROUND_HOLLOW = 169;

    // INVALID
    SUB_TYPE_INVALID = 180;

    // TFAFFIC
    // UNKNOWN_MOVABLE
    SUB_TYPE_UNKNOWN_MOVABLE_ANIMAL = 192;
    SUB_TYPE_UNKNOWN_MOVABLE_OTHER = 193;
    SUB_TYPE_UNKNOWN_MOVABLE_WIPER = 194;

    // UNKNOWN_UNMOVABLE
    SUB_TYPE_UNKNOWN_UNMOVABLE_WARNING_TRIANGLE = 223;
    SUB_TYPE_UNKNOWN_UNMOVABLE_SKY = 224;
    SUB_TYPE_UNKNOWN_UNMOVABLE_BUILDING = 225;
    SUB_TYPE_UNKNOWN_UNMOVABLE_VEGETATION = 226;
    SUB_TYPE_UNKNOWN_UNMOVABLE_STONE_BLOCK = 227;

    SUB_TYPE_UNKNOWN_UNMOVABLE_PILE = 228;
    SUB_TYPE_UNKNOWN_UNMOVABLE_CURB = 229;
    SUB_TYPE_UNKNOWN_UNMOVABLE_SPEED_BUMP = 230;
    SUB_TYPE_UNKNOWN_UNMOVABLE_TRAFFIC_CONE = 231;
    SUB_TYPE_UNKNOWN_UNMOVABLE_TRAFFIC_LIGHT = 232;
    SUB_TYPE_UNKNOWN_UNMOVABLE_TRAFFIC_SIGN = 233;
    SUB_TYPE_UNKNOWN_UNMOVABLE_WATER_SAFETY_BARRIER = 234;
    SUB_TYPE_UNKNOWN_UNMOVABLE_TERRIAN = 235;
    SUB_TYPE_UNKNOWN_UNMOVABLE_TREE = 236;
    SUB_TYPE_UNKNOWN_UNMOVABLE_FENCE = 237;
    SUB_TYPE_UNKNOWN_UNMOVABLE_POLE = 238;
    SUB_TYPE_UNKNOWN_UNMOVABLE_FLOWER_BOX = 239;
    SUB_TYPE_UNKNOWN_UNMOVABLE_WARNING_SIGN = 240;
    SUB_TYPE_UNKNOWN_UNMOVABLE_OTHER_OBSTACLE = 241;
    SUB_TYPE_UNKNOWN_UNMOVABLE_CHAIN = 242;
    SUB_TYPE_UNKNOWN_UNMOVABLE_OTHER_CONE = 243;
    SUB_TYPE_UNKNOWN_UNMOVABLE_TRUNK = 244;
    SUB_TYPE_UNKNOWN_UNMOVABLE_POTHOLE = 245;
    SUB_TYPE_UNKNOWN_UNMOVABLE_VIRTUAL = 246;
    SUB_TYPE_UNKNOWN_UNMOVABLE_RAIN_DIRT = 247; // object that may be created by rain dirt noise
    SUB_TYPE_UNKNOWN_UNMOVABLE_ABNORMAL_AREA = 248;
    SUB_TYPE_UNKNOWN_UNMOVABLE_WATER_PIPE = 249;
    SUB_TYPE_UNKNOWN_UNMOVABLE_BLIND_AREA = 250;
    SUB_TYPE_UNKNOWN_UNMOVABLE_LOW_OBSTACLE = 251;
    SUB_TYPE_UNKNOWN_UNMOVABLE_SEEN_AREA = 252;
    SUB_TYPE_UNKNOWN_UNMOVABLE_ROOF_OBJ = 253;
    SUB_TYPE_UNKNOWN_UNMOVABLE_BUMPY_ROAD = 254;
  }

  optional bool use_convexhull = 31 [default = false]; // convexhull recommended if true
  optional ObstacleSubType obstacle_sub_type = 32;

  enum VehicleState {
    VEHICLE_STATE_INVALID = 0;
    VEHICLE_STATE_PARK = 1;
    VEHICLE_STATE_STOP = 2;
  }
  optional VehicleState vehicle_state = 33 [default = VEHICLE_STATE_INVALID];
  optional bool is_crowd = 34 [default = false];
  optional bool is_speed_bump_passable = 35 [default = false];
  optional double min_height_to_ground = 36 [default = 0];
  optional double visual_theta = 37;
  optional bool tracking_convergence = 38 [default = true];
  // [0, 1], 0: not be occluded at all 1: severe occlusion
  optional double occlusion = 39 [default = 0]; 

  optional Point3D filter_velocity = 40;
  optional Point3D flow_velocity = 41;

  optional float boundary_confidence = 51 [default = 0.0];

  optional PedestrianActivity pedestrian_activity = 52;

  optional float detection_status = 53 [default = 0.0];

  // for long term memory purpose
  optional bool is_memorized = 59 [default = false];
  optional bool is_in_voronoi = 60 [default = false];
  // true -> have measurement, false ->just predicted without measurement
  optional bool measured_flag = 54 [default = true];

  enum StableFlag {
    P1_STABLE = 0;
    P2_UNSTABLE = 1;
  }
  optional StableFlag stable_flag_position = 55 [default = P1_STABLE];
  optional StableFlag stable_flag_size = 56 [default = P1_STABLE];
  optional StableFlag stable_flag_type = 57 [default = P1_STABLE];

  optional int32 reference_id = 58;  // reference obstacle id for uncertain obstacle.

  optional Box main_box = 61; // bounding inferred box for collision detection
  optional Box bounding_box = 62; // bounding box for latest lidar points cluster
  optional Box stable_box = 63; // stable inferred box for prediction
  optional float motion_uncertainty = 64;
  optional float ghost_probe_info = 65; // the ghost object which rush out from occlusion area


  // post tracking
  optional PerceptionPostTracking perception_post_tracking = 100;
  // post tracking

  // obstacle actual type for truth
  optional string actual_type = 101;

  // obstacle actual controlled type for simulation
  optional string controlled_type = 102; 

  // object action
  enum ObjectActionType {
    ACTION_UNKNOWN = 0;
    ACTION_NORMAL = 1;
    // per type
    ACTION_PER_XG = 64;
    ACTION_PER_PUSH = 65;
    ACTION_PER_ONOFF = 66;
    ACTION_PER_LOAD = 67;
    ACTION_PER_SITTING = 68;
    ACTION_PER_BOW = 69;
    ACTION_PER_LOWHEAD = 70;
    ACTION_PER_HANDHELD = 71;
    ACTION_PER_CHILD = 72;
    ACTION_PER_RUN = 73;
    // car type
    ACTION_CAR_DOOR = 128;
    ACTION_CAR_ONOFF = 129;
    ACTION_CAR_LOAD = 130;
  };
  repeated ObjectActionType action_type = 110;
  repeated Point3D pos_anchor_points = 111;

  repeated double default_val = 150;  //  default val, [0] : output type, [1~n] values
  optional Point3D tight_position = 151;
  optional double tight_width = 152;
  optional double tight_length = 153;
  optional bool is_occasionally_seen = 154 [default = false];

  // Compression during transmission for XDream 
  optional bytes compress_data = 155;

}

message PerceptionOnlineArea {
  optional int32 id = 1;                               // area ID.
  optional double timestamp = 2;                       // GPS time in seconds.

  // area position in the world coordinate system.
  optional Point3D position = 3;

  repeated Point3D polygon_point = 4;            // area corner points.

  enum Type {
    UNKNOWN = 0;
    SEEN_AREA = 1;
  };
  optional Type type = 5;                                // area type

  enum AreaSubType {
    SUB_TYPE_UNKNOWN = 0;
  }
  optional AreaSubType area_sub_type = 6;                // area sub type
}

// only for post tracking
message Point3DLRIH {
  optional double x = 1 [default = nan];
  optional double y = 2 [default = nan];
  optional double z = 3 [default = nan];
  optional double lidar_id = 4 [default = nan];
  optional double ring = 5 [default = nan];
  optional double intensity = 6 [default = nan];
  optional double height_to_ground = 7 [default = nan];
}

message RawMeasureLidar {
  optional bool valid = 1; // valid if updated, not valid if just predict
  optional int64 timestamp = 2;
  optional int32 id = 3;
  optional PerceptionObstacle.Type type = 4;
  optional string frame_id = 5;
  repeated Point3D points = 6; // points after LiDar post procession
  optional double center_x = 7;
  optional double center_y = 8;
  optional double center_z = 9;
  optional double length = 10;
  optional double width = 11;
  optional double height = 12;
  optional double vx = 13; // may from deep tracking
  optional double vy = 14; // may from deep tracking
  optional double yaw = 15;
  optional double score = 16;
  repeated Point3D points_origin = 17; // points before LiDar post procession
  repeated Point3DLRIH points_processed = 18;
  repeated Point3DLRIH points_sensor = 19;
}

message RawMeasureVision {
  optional bool valid = 1;
  optional int64 timestamp = 2;
  optional int32 id = 3;
  optional string frame_id = 4;
  optional PerceptionObstacle.Type vision_type = 5;
  optional PerceptionObstacle.SubType vision_sub_type = 6;
  optional BBox2D bbox2d = 7;
  optional double score = 8;
}

message PerceptionPostTracking {
 optional RawMeasureLidar raw_measure_lidar = 1; // lidar raw measurement
 optional RawMeasureVision raw_measure_vision = 2; // vision raw measurement
}

message LaneBoundaryType {
  enum Type {
    UNKNOWN = 0;
    DOTTED_YELLOW = 1;
    DOTTED_WHITE = 2;
    SOLID_YELLOW = 3;
    SOLID_WHITE = 4;
    DOUBLE_YELLOW = 5;
    CURB = 6;
  };
  // Offset relative to the starting point of boundary
  optional double s = 1;
  // support multiple types
  repeated Type types = 2;
}

message LaneMarker {
  // optional adlab.map.LaneBoundaryType.Type lane_type = 1;
  optional LaneBoundaryType.Type lane_type = 1;
  optional double quality = 2;  // range = [0,1]; 1 = the best quality
  optional int32 model_degree = 3;

  // equation X = c3 * Z^3 + c2 * Z^2 + c1 * Z + c0
  optional double c0_position = 4;
  optional double c1_heading_angle = 5;
  optional double c2_curvature = 6;
  optional double c3_curvature_derivative = 7;
  optional double view_range = 8;
  optional double longitude_start = 9;
  optional double longitude_end = 10;
}

message LaneMarkers {
  optional LaneMarker left_lane_marker = 1;
  optional LaneMarker right_lane_marker = 2;
  repeated LaneMarker next_left_lane_marker = 3;
  repeated LaneMarker next_right_lane_marker = 4;
}

message CIPVInfo {
  optional int32 cipv_id = 1;
  repeated int32 potential_cipv_id = 2;
}

message PerceptionObstacles {
  repeated PerceptionObstacle perception_obstacle = 1;  // An array of obstacles
  optional Header header = 2;  // Header
  optional ErrorCode error_code = 3 [default = OK];
  optional LaneMarkers lane_marker = 4;
  optional CIPVInfo cipv_info = 5;  // Closest In Path Vehicle (CIPV)
  repeated PerceptionObstacle uncertain_perception_obstacle = 6;  // An array of uncertain_obstacles
  repeated PerceptionOnlineArea perception_online_area = 7;  // An array of perception areas
}
